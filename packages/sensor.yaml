sensor:
  #===============================================================================#
  #==== LUMIERES =================================================================#
  #===============================================================================#    
  # TODO
  - platform: template
    sensors:
      light_recap:
        friendly_name: Lumières
        icon_template: mdi:lightbulb
        value_template: >-              
            {%- set lights = [
                states.light.agathe_plafond,
                states.light.bandeau,
                states.light.bandeau_agathe,
                states.light.chambre_plafond,
                states.light.entree_plafond,
                states.light.entree_plafond_old,
                states.light.escalier_haut,
                states.light.hall_plafond,
                states.light.hue_go_agathe,
                states.light.hue_go_canape,
                states.light.hue_go_entree,
                states.light.hue_go_salon,
                states.light.hue_lightstrip_hall,
                states.light.hue_lightstrip_lit,
                states.light.hue_lightstrip_salon_meuble,
                states.light.hue_play_centre,
                states.light.hue_play_droite,
                states.light.hue_play_gauche,
                states.light.huego_ring,
                states.light.lampadaire_enfants,
                states.light.lampadaire_salon,
                states.light.miroir_sdb_droite,
                states.light.miroir_sdb_gauche,
                states.light.notepad_k10_screen,
                states.light.salle_a_manger_plafond,
                states.light.salon_plafond,
                states.light.wc,
                states.light.wled_bandeau,
                states.light.wled_ring,
                states.light.hall_etage,
                states.light.xiaomi_gateway_light,
                states.light.spots_cuisine_bar,
                states.light.spots_cuisine_evier,
                states.light.spot_sdb_bas,
                states.light.sdb_rdc_plafond,
                states.light.spot_sdb_1_etage,
                states.light.spot_sdb_2_etage,
                states.light.spot_sdb_3_etage,
                states.light.plafond_dressing
            ] %}
            {%- set lights_on = lights | selectattr('state','eq','on') | list %}
            {%- set lights_name = lights | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}
            {%- if (lights_on | length == 1) -%}
              {{ lights_name }} est allumée
            {%- elif (lights_on | length > 1) -%}
              {{ lights_on | length }} lampes sont allumées
            {%- else %}
              Toutes les lumières sont éteintes
            {%- endif -%}
        
    
  #===============================================================================#
  #==== DIVERS ===================================================================#
  #===============================================================================#    


  - platform: template
    sensors:
      calendar_next_event:
        entity_id:
          - calendar.goguigaut_gmail_com
          - sensor.time
        friendly_name: "Prochain événement calendrier"
        value_template: >
          {% set e = strptime(
               states.calendar.goguigaut_gmail_com.attributes.start_time,
               '%Y-%m-%d %H:%M:%S') %}
          {{ e.strftime('%j')|int - now().strftime('%j')|int == 1 and now().hour >= 12 }}

  - platform: template
    sensors:
      since_last_motion:
        friendly_name: 'Minutes since last motion'
        value_template: >
          {%- set sensors = [
            states.binary_sensor.motion_wc_occupancy,
            states.binary_sensor.motion_entree_occupancy, 
            states.binary_sensor.motion_escalier_bas_occupancy,
            states.binary_sensor.motion_escalier_haut_occupancy,
            states.binary_sensor.motion_cuisine_occupancy,
            states.binary_sensor.motion_dressing_occupancy,
            states.binary_sensor.motion_sdb_bas_occupancy,
            states.binary_sensor.motion_sdb_haut_occupancy
          ] %}
          {%- set filtered_sensors = sensors | selectattr('last_changed','==', sensors | map(attribute='last_changed') | max) | list %}
          {{ (( as_timestamp(now()) - as_timestamp(filtered_sensors[0].last_changed)) / 60 ) | int }}

  - platform: template
    sensors:
      fenetre_recap:
        friendly_name: Fenêtres
        icon_template: mdi:window-open-variant
        value_template: >-              
            {%- set fenetres = [
                states.binary_sensor.door_entree_contact,
                states.binary_sensor.porte_terrasse_contact
            ] %}
            {%- set fenetre_on = fenetres | selectattr('state','eq','on') | list %}
            {%- set fenetre_name = fenetres | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}
            {%- if (fenetre_on | length == 1) -%}
              {{ fenetre_name }} est ouverte
            {%- elif (fenetre_on | length > 1) -%}
              {{ fenetre_on | length }} fenêtres sont ouvertes
            {%- else %}
              Toutes les fenêtres sont fermeés
            {%- endif -%}
              
  - platform: template
    sensors:
      gautier_last_changed:
        value_template: >
            {% set up_time = as_timestamp(now()) - as_timestamp(states.person.gautier.last_changed) %}
            {% set days = (up_time // (60 * 60 * 24)) | int %}
            {% set weeks = (days // 7) | int %}
            {% set hours = (up_time // (60 * 60)) | int %}
            {% set hours =  hours - days * 24 %}
            {% set minutes = (up_time // 60) | int %}
            {% set minutes = minutes - (days * 24 * 60) - (hours * 60) %}
            
            {% set days = (days | int) - (weeks * 7) %}
            
            {% macro phrase(value, name) %}
                      {%- set value = value | int %}
                      {%- set end = 's' if value > 1 else '' %}
                      {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
            {%- endmacro %}
                
            {% set text = [ phrase(weeks, 'semaine'), phrase(days, 'jour'), phrase(hours, 'heure'), 
                            phrase(minutes, 'minute') ] | select('!=','') | list | join(', ') %}
            {% set last_comma = text.rfind(',') %}
            {% if last_comma > 0 %}
              {% set text = text[:last_comma] + ' et' + text[last_comma + 1:] %}
            {%- endif %}
            {{ text }}
      manon_last_changed:
        value_template: >
            {% set up_time = as_timestamp(now()) - as_timestamp(states.person.manon.last_changed) %}
            {% set days = (up_time // (60 * 60 * 24)) | int %}
            {% set weeks = (days // 7) | int %}
            {% set hours = (up_time // (60 * 60)) | int %}
            {% set hours =  hours - days * 24 %}
            {% set minutes = (up_time // 60) | int %}
            {% set minutes = minutes - (days * 24 * 60) - (hours * 60) %}
            
            {% set days = (days | int) - (weeks * 7) %}
            
            {% macro phrase(value, name) %}
                      {%- set value = value | int %}
                      {%- set end = 's' if value > 1 else '' %}
                      {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
            {%- endmacro %}
                
            {% set text = [ phrase(weeks, 'semaine'), phrase(days, 'jour'), phrase(hours, 'heure'), 
                            phrase(minutes, 'minute') ] | select('!=','') | list | join(', ') %}
            {% set last_comma = text.rfind(',') %}
            {% if last_comma > 0 %}
              {% set text = text[:last_comma] + ' et' + text[last_comma + 1:] %}
            {%- endif %}
            {{ text }}
      porte_last_changed:
        value_template: >
            {% set up_time = as_timestamp(now()) - as_timestamp(states.binary_sensor.porte_entree_contact.last_changed) %}
            {% set days = (up_time // (60 * 60 * 24)) | int %}
            {% set weeks = (days // 7) | int %}
            {% set hours = (up_time // (60 * 60)) | int %}
            {% set hours =  hours - days * 24 %}
            {% set minutes = (up_time // 60) | int %}
            {% set minutes = minutes - (days * 24 * 60) - (hours * 60) %}
            
            {% set days = (days | int) - (weeks * 7) %}
            
            {% macro phrase(value, name) %}
                      {%- set value = value | int %}
                      {%- set end = 's' if value > 1 else '' %}
                      {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
            {%- endmacro %}
                
            {% set text = [ phrase(weeks, 'semaine'), phrase(days, 'jour'), phrase(hours, 'heure'), 
                            phrase(minutes, 'minute') ] | select('!=','') | list | join(', ') %}
            {% set last_comma = text.rfind(',') %}
            {% if last_comma > 0 %}
              {% set text = text[:last_comma] + ' et' + text[last_comma + 1:] %}
            {%- endif %}
            {{ text }}
  
  - platform: template
    sensors:
      ephemeride:
        value_template: '{{ states.calendar.fetes_des_prenoms.attributes.message }}'
        friendly_name: 'Saint du jour'
      vacuum_total_cleaned_area:
        value_template: '{{ states("sensor.xiaomi_vacuum_cleaner_last_clean_area") | float | round(2) }}'
        friendly_name: 'Total m2 netoyés'
        icon_template: mdi:texture-box
      vacuum_total_cleaning_time:
        value_template: '{{ states("sensor.xiaomi_vacuum_cleaner_last_clean_duration") | float | timestamp_custom("%H:%M:%S", 0) }}'
        friendly_name: 'Temps total'
        icon_template: mdi:timer-sand
      vacuum_fan_speed:
        value_template: '{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.fan_speed }}'
        friendly_name: 'Vitesse'
        icon_template: mdi:fan
      vacuum_battery_level:
        value_template: '{{ states.vacuum.xiaomi_vacuum_cleaner.attributes.battery_level }}'
        friendly_name: 'Batterie'
        icon_template: mdi:battery-high
        
  - platform: template
    sensors:
      gautier_status:
        value_template: '{{ states.input_select.gautier_status_dropdown.state }}'
        friendly_name: 'Gautier'
      manon_status:
        value_template: '{{ states.input_select.manon_status_dropdown.state }}'
        friendly_name: 'Manon'
    
  # - platform: spotify-playlist-sensor
  #   client_id: !secret spotify_client_id_2
  #   client_secret: !secret spotify_client_secret_2
    
  - platform: time_date
    display_options:
      - 'time'
      - 'date'
      - 'date_time'
      - 'date_time_iso'
      - 'time_date'
      
  - platform: template
    sensors:
      full_date:
        value_template: >
          {%- set date = as_timestamp(now()) -%}
          {% set jour = ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"] %}
          {% set mois = ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Aout", "Septembre", "Octobre", "Novembre", "Décembre"] %}
          {% set m_ok = date | timestamp_custom("%m") | int %}
          {% set j_ok = date | timestamp_custom("%w") | int %}
          {% set nom_jour = jour[j_ok] %}
          {% set jours_semaine = date | timestamp_custom("%d") %}
          {% set mois = mois[m_ok - 1] %}
          {{ nom_jour }} {{ jours_semaine }} {{ mois }}
        friendly_name: Full date
        unit_of_measurement: ''  
      full_time:
        value_template: "{{ as_timestamp(states('sensor.date_time_iso')) | timestamp_custom('%X') }}"
        friendly_name: Full time
      
      
  # - platform: cryptoinfo
  #   id: "Binance"                
  #   cryptocurrency_name: "eth"  
  #   currency_name: "usd"             
  #   multiplier: 1                    
  #   update_frequency: 15

      
  - platform: darksky
    api_key: !secret dark_sky_api_key
    scan_interval: 1200
    language: 'fr'
    forecast:
      - 0
    monitored_conditions:
      - summary
      - precip_probability
      - apparent_temperature_high
      - apparent_temperature_low

      
  - platform: template
    sensors:
      nextsunrise:
        entity_id: sun.sun
        friendly_name: 'Next Sunrise'
        value_template: >
          {{ as_timestamp(states.sun.sun.attributes.next_rising) | timestamp_custom(' %H:%M ') }}
        icon_template: mdi:weather-sunset-up
      nextsunset:
        entity_id: sun.sun
        friendly_name: 'Next Sunset'
        value_template: >
          {{ as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom(' %H:%M ') }}
        icon_template: mdi:weather-sunset-down
  
  
  - platform: scrape
    resource: https://www.savoir-inutile.com/
    scan_interval: 7200
    name: Savoir scrape
    select: "#phrase"
    
    
  - platform: prixCarburant
    stationID:
      - 63200001 #Carrefour
      - 63720003 #Intermarche

# --- DEPRECATED  
#  - platform: moon
  - platform: template
    sensors:
      moon_phases:
        friendly_name: 'Lune'
        value_template: >-
          {% set phases = {'first_quarter': 'Premier quartier', 'full_moon': 'Pleine lune',
                           'last_quarter': 'Dernier quartier', 'new_moon': 'Nouvelle lune',
                           'waning_crescent': 'Dernier croissant', 'waning_gibbous': 'Gibbeuse décroissante',
                           'waxing_crescent': 'Premier croissant', 'waxing_gibbous': 'Gibbeuse croissante'} %}
          {% set phase = states('sensor.moon') %}
          {{ phases[phase] if phase in phases.keys() else 'Error' }}
        entity_picture_template: /local/images/moon_phases/{{ states.sensor.moon.state }}.png
      
  - platform: template
    sensors:
      98_leclerc:
        friendly_name: 'SP98 Carrefour'
        value_template: >
          {{ state_attr("sensor.prixcarburant_carrefour", "E98") }}
        unit_of_measurement: "€"
      95_leclerc:
        friendly_name: 'SP95 Carrefour'
        value_template: >
          {{ state_attr("sensor.prixcarburant_carrefour", "E95") }}
        unit_of_measurement: "€"
    
  - platform: rest
    name: Kiosk Device Info
    resource: !secret rest_url_kiosk_device_info
    json_attributes:
    - screenBrightness
    - isScreenOn
    value_template: 'OK'
  
  - platform: rest
    name: 'vacances domogeek'
    resource: http://domogeek.entropialux.com/holidayall/B/now
    json_attributes:
      - schoolholiday
    value_template: '{{value_json.schoolholiday}}'
    scan_interval: 21600
    headers: 
      User-Agent: Home Assistant
      Content-Type: application/json
      
  - platform: rest
    name: 'Ephemeride domogeek'
    resource: http://domogeek.entropialux.com/feastedsaint/now
    value_template: '{{value}}'
    scan_interval: 21600
    headers: 
      User-Agent: Home Assistant
      Content-Type: application/json



  - platform: template
    sensors:
      vacances:
        value_template: >-
          {% if is_state("sensor.vacances_domogeek", "False") -%}
            Non
          {%- else -%}
            {{ states('sensor.vacances_domogeek') }}
          {%- endif %}
        friendly_name: 'Vancances' 


  #===============================================================================#
  #==== POIDS ====================================================================#
  #===============================================================================#
  
#  - platform: mqtt
#    name: "Gautier Weight"
#    state_topic: "miscale/Gautier/weight"
#    value_template: "{{ value_json['weight'] }}"
#    unit_of_measurement: "kg"
#    json_attributes_topic: "miscale/Gautier/weight"
#    icon: mdi:scale-bathroom
#  
#  - platform: mqtt
#    name: "Gautier BMI"
#    state_topic: "miscale/Gautier/weight"
#    value_template: "{{ value_json['bmi'] }}"
#    icon: mdi:human-pregnant
#    unit_of_measurement: "kg/m2"

  #===============================================================================#
  #==== ELEC =====================================================================#
  #===============================================================================#
  
  - platform: template
    sensors:
      elec_current_price:
        value_template: '{{ (states.sensor.consommation_day.state|float*0.1680)|float|round(2) }}'  
        friendly_name: "Coût Aujourd'hui"
        unit_of_measurement: '€'
      elec_yesterday_price:
        value_template: '{{ (states.sensor.consommation_day.attributes.last_period|float*0.1680)|float|round(2) }}'  
        friendly_name: 'Coût Hier' 
        unit_of_measurement: '€'
      elec_current_week_price:
        value_template: '{{ (states.sensor.consommation_week.state|float*0.1680)|float|round(2) }}'  
        friendly_name: 'Coût Semaine' 
        unit_of_measurement: '€'       
      elec_current_month_price:
        value_template: '{{ (states.sensor.consommation_month.state|float*0.1680+14.16)|float|round(2) }}'  
        friendly_name: 'Coût Mois' 
        unit_of_measurement: '€'
      elec_last_month_price:
        value_template: '{{ (states.sensor.consommation_month.attributes.last_period|float*0.1680+14.16)|float|round(2) }}'  
        friendly_name: 'Coût Dernier Mois' 
        unit_of_measurement: '€'
      elec_current_year_price:
        value_template: '{{ (states.sensor.consommation_year.state|float*0.1680+170)|float|round(2) }}'  
        friendly_name: 'Coût Année' 
        unit_of_measurement: '€'
        
  - platform: template
    sensors:
      consommation_yesterday:
        value_template: '{{ states.sensor.consommation_day.attributes.last_period }}'  
        friendly_name: "Conssomation hier"
        unit_of_measurement: 'kWh'  
  
  #===============================================================================#
  #==== IMPRIMANTE 3D ============================================================#
  #===============================================================================#
  - platform: rest
    name: spaghetti_sensor
    resource: !secret url_fluidd
    json_attributes_path: "$.result.status"
    json_attributes:
      - heater_bed
      - extruder
      - print_stats
      - toolhead
      - display_status
      - virtual_sdcard
    value_template: 'OK'
  - platform: template
    sensors:
      spaghetti_hotend_target:
        friendly_name: 'Hotend Target'
        value_template: '{{ states.sensor.spaghetti_sensor.attributes["extruder"]["target"]  | float | round(1) }}'
        device_class: temperature
        unit_of_measurement: '°C'
        icon_template: mdi:thermometer
      spaghetti_hotend_actual:
        friendly_name: 'Hotend Actual'
        value_template: '{{ states.sensor.spaghetti_sensor.attributes["extruder"]["temperature"]  | float | round(1) }}'
        device_class: temperature
        unit_of_measurement: '°C'
        icon_template: mdi:thermometer
      spaghetti_bed_target:
        friendly_name: 'Bed Target'
        value_template: '{{ states.sensor.spaghetti_sensor.attributes["heater_bed"]["target"]  | float | round(1) }}'
        device_class: temperature
        unit_of_measurement: '°C'
        icon_template: mdi:thermometer
      spaghetti_bed_actual:
        friendly_name: 'Bed Actual'
        value_template: '{{ states.sensor.spaghetti_sensor.attributes["heater_bed"]["temperature"]  | float | round(1) }}'
        device_class: temperature
        unit_of_measurement: '°C'
        icon_template: mdi:thermometer
      spaghetti_state:
        friendly_name: 'Printer State'
        value_template: '{{ states.sensor.spaghetti_sensor.attributes["print_stats"]["state"]}}'
        icon_template: >
          {% set val =  states.sensor.spaghetti_sensor.attributes["print_stats"]["state"]  %}
          {% if val == 'standby' %}
            mdi:sleep
          {% elif val == 'error' %}
            mdi:alert-circle
          {% elif val == 'printing' %}
            mdi:printer-3d-nozzle
          {% elif val == 'paused' %}
            mdi:pause-circle
          {% elif val == 'complete' %}
            mdi:printer-3d
          {% else %}
            mdi:help-circle
          {% endif %}
      spaghetti_current_print:
        friendly_name: 'Current Print'
        value_template: '{{ states.sensor.spaghetti_sensor.attributes["print_stats"]["filename"]}}'
      spaghetti_current_progress:
        friendly_name: 'Progress'
        value_template: '{{ ((states.sensor.spaghetti_sensor.attributes["display_status"]["progress"])*100) | round(0, "floor") }}'
        unit_of_measurement: '%'
        icon_template: mdi:progress-clock
      spaghetti_print_time:
        friendly_name: 'Time Elapsed'
        value_template: '{{ states.sensor.spaghetti_sensor.attributes["print_stats"]["print_duration"] |timestamp_custom("%H:%M:%S", 0)}}'
        icon_template: mdi:camera-timer
      spaghetti_time_remaining:
        friendly_name: 'Time Remaining'
        value_template: '{{ (((states.sensor.spaghetti_sensor.attributes["print_stats"]["print_duration"]/states.sensor.spaghetti_sensor.attributes["display_status"]["progress"]- states.sensor.spaghetti_sensor.attributes["print_stats"]["print_duration"]) if states.sensor.spaghetti_sensor.attributes["display_status"]["progress"]>0 else 0)) | timestamp_custom("%H:%M:%S", 0)}}'
        icon_template: mdi:timer-sand
      spaghetti_eta:
        friendly_name: 'ETA'
        value_template: '{{ (as_timestamp(now())+2*60*60+((states.sensor.spaghetti_sensor.attributes["print_stats"]["print_duration"]/states.sensor.spaghetti_sensor.attributes["display_status"]["progress"]- states.sensor.spaghetti_sensor.attributes["print_stats"]["print_duration"]) if states.sensor.spaghetti_sensor.attributes["display_status"]["progress"]>0 else 0)) | timestamp_custom("%H:%M:%S", 0)}}'
        icon_template: mdi:av-timer
      spaghetti_nozzletemp:
        friendly_name: 'Nozzle Temperature'
        value_template: '{{[( states.sensor.spaghetti_sensor.attributes["extruder"]["temperature"]  | float | round(1)| string)," / ",( states.sensor.spaghetti_sensor.attributes["extruder"]["target"]  | float | round(1)| string)]|join}}'
        icon_template: mdi:thermometer
      spaghetti_bedtemp:
        friendly_name: 'Bed Temperature'
        value_template: '{{[( states.sensor.spaghetti_sensor.attributes["heater_bed"]["temperature"]  | float | round(1)| string)," / ",( states.sensor.spaghetti_sensor.attributes["heater_bed"]["target"]  | float | round(1)| string)]|join}}'
        icon_template: mdi:thermometer
  
  - platform: rest
    scan_interval: 15
    name: klipper_preview_path
    resource_template: !secret url_fluidd_preview
    json_attributes_path: "$.result.thumbnails.[1]"
    json_attributes:
      - data
      - width
      - height
      - size
    value_template: 'OK'
    
  
  #===============================================================================#
  #==== SYSTEME ==================================================================#
  #===============================================================================#

# -- DEPRECATED ---  
#   - platform: uptime
#     name: Hassio Uptime
#     unit_of_measurement: minutes
    
  - platform: version
    source: hassio
  
  - platform: command_line
    name: Supervisor updates
    command: 'curl http://supervisor/supervisor/info -H "Authorization: Bearer $(printenv SUPERVISOR_TOKEN)" | jq ''{"newest_version":.data.version_latest,"current_version":.data.version,"addons":[.data.addons[] | select(.version != .installed)]}'''
    value_template: "{{ value_json.addons | length }}"
    json_attributes:
      - newest_version
      - current_version
      - addons
  
  - platform: systemmonitor
    resources:
          - type: disk_use_percent
            arg: /home
          - type: memory_use_percent
          - type: memory_use
          - type: swap_use
          - type: swap_free
          - type: swap_use_percent
          - type: load_1m
          - type: load_5m
          - type: load_15m
          - type: memory_free
          - type: last_boot
          - type: processor_use
          - type: network_in
            arg: eth0
          - type: network_out
            arg: eth0
          - type: ipv4_address
            arg: eth0
          - type: throughput_network_in
            arg: eth0
          - type: throughput_network_out
            arg: eth0
          - type: processor_use
  
  - platform: template
    sensors:
    #----- Count Automations
      count_automations:
        entity_id: sensor.date
        value_template: "{{ states.automation | list | length }}"
    #----- Count Scripts
      count_scripts:
        entity_id: sensor.date
        value_template: "{{ states.script| list | length }}"
    #----- Count Device Trackers
      count_device_trackers:
        entity_id: sensor.date
        value_template: "{{ states.device_tracker | list | length }}"
    #----- Count Binary Sensors
      count_binary_sensors:
        entity_id: sensor.date
        value_template: "{{ states.binary_sensor| list | length }}"
    #----- Count Sensors
      count_sensors:
        entity_id: sensor.date
        value_template: "{{ states.sensor | list | length }}"
    #----- Count Switches
      count_switches:
        entity_id: sensor.date
        value_template: "{{ states.switch | list | length }}"
    #----- Count Zones
      count_zones:
        entity_id: sensor.date
        value_template: "{{ states.zone | list | length }}"
    #----- Input Booleans
      count_input_booleans:
        entity_id: sensor.date
        value_template: "{{ states.input_boolean | list | length }}"
    #----- Input Numbers
      count_input_numbers:
        entity_id: sensor.date
        value_template: "{{ states.input_number | list | length }}"
    #----- Input Texts
      count_input_texts:
        entity_id: sensor.date
        value_template: "{{ states.input_text | list | length }}"
    #----- Input Selects
      count_input_selects:
        entity_id: sensor.date
        value_template: "{{ states.input_select | list | length }}"
    #----- Input Date Times
      count_input_datetimes:
        entity_id: sensor.date
        value_template: "{{ states.input_datetime | list | length }}"
  
  
  
  
  
  
  